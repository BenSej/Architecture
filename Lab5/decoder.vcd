$date
	Sun Feb 28 20:33:08 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decoder_test $end
$var wire 1 ! writeenable $end
$var wire 1 " word_we $end
$var wire 1 # slt $end
$var wire 1 $ rd_src $end
$var wire 1 % mem_read $end
$var wire 1 & lui $end
$var wire 1 ' except $end
$var wire 2 ( control_type [1:0] $end
$var wire 1 ) byte_we $end
$var wire 1 * byte_load $end
$var wire 2 + alu_src2 [1:0] $end
$var wire 3 , alu_op [2:0] $end
$var wire 1 - addm $end
$var reg 6 . funct [5:0] $end
$var reg 6 / opcode [5:0] $end
$var reg 1 0 zero $end
$scope module decoder $end
$var wire 1 1 add $end
$var wire 1 - addm $end
$var wire 1 2 addmWire $end
$var wire 1 3 andWire $end
$var wire 1 * byte_load $end
$var wire 1 ) byte_we $end
$var wire 1 ' except $end
$var wire 6 4 funct [5:0] $end
$var wire 1 5 jr $end
$var wire 1 & lui $end
$var wire 1 % mem_read $end
$var wire 1 6 norWire $end
$var wire 6 7 opcode [5:0] $end
$var wire 1 8 orWire $end
$var wire 1 $ rd_src $end
$var wire 1 # slt $end
$var wire 1 9 sltWire $end
$var wire 1 : sub $end
$var wire 1 " word_we $end
$var wire 1 ! writeenable $end
$var wire 1 ; xorWire $end
$var wire 1 0 zero $end
$var wire 1 < xori $end
$var wire 1 = sw $end
$var wire 1 > sb $end
$var wire 1 ? ori $end
$var wire 1 @ lw $end
$var wire 1 A luiWire $end
$var wire 1 B lbu $end
$var wire 1 C j $end
$var wire 2 D control_type [1:0] $end
$var wire 1 E bne $end
$var wire 1 F beq $end
$var wire 1 G andi $end
$var wire 2 H alu_src2 [1:0] $end
$var wire 3 I alu_op [2:0] $end
$var wire 1 J addi $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0J
b10 I
b10 H
0G
0F
0E
b0 D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
b0 7
06
05
b101100 4
03
12
01
10
b0 /
b101100 .
1-
b10 ,
b10 +
0*
0)
b0 (
0'
0&
1%
0$
0#
0"
1!
$end
#10
